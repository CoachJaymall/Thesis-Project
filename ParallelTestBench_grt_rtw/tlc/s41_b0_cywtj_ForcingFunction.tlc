%implements s41_b0_cywtj_ForcingFunction "C"

%function ForcingFunction(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

NeslSimulationData *simulationData;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
XDot_ParallelTestBench_T *_rtXdot;
char *msg;
real_T tmp[4];
real_T time;
int_T tmp_0[2];
int_T iS;
boolean_T lsat;
boolean_T usat;
%closefile localVarDecl
_rtXdot = %<(SLibCG_SE(SLibGetContStatesDerivativeStructPtr()))>;
/* {S!d834}ForcingFunction for Integrator: '<S46>/Integrator' */
_rtXdot->Integrator_CSTATE = ParallelTestBench_B.Sum;
/* {S!d836}ForcingFunction for SimscapeInputBlock: '<S62>/INPUT_1_1_1' */
_rtXdot->ParallelTestBenchICE_Side_Inert = (ParallelTestBench_B.UnitConversion - ParallelTestBench_X.ParallelTestBenchICE_Side_Inert) * 1000.0;
/* {S!d838}ForcingFunction for SimscapeExecutionBlock: '<S62>/STATE_1' */
simulationData = (NeslSimulationData *)ParallelTestBench_DW.STATE_1_SimData;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 4;
simulationData->mData->mContStates.mX = &ParallelTestBench_X.ParallelTestBenchICE_Side_Ine_n[0];
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = &ParallelTestBench_DW.STATE_1_Discrete;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = &ParallelTestBench_DW.STATE_1_Modes;
lsat = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = lsat;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
lsat = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = lsat;
simulationData->mData->mIsSolverCheckingCIC = false;
lsat = %<(SLibCG_SE(RTMIsSolverComputingJacobian()))>;
simulationData->mData->mIsComputingJacobian = lsat;
simulationData->mData->mIsEvaluatingF0 = false;
simulationData->mData->mIsSolverRequestingReset = false;
simulationData->mData->mIsModeUpdateTimeStep = %<(SLibCG_SE(RTMGetIsModeUpdateTimeStep()))>;
tmp_0[0] = 0;
tmp[0] = ParallelTestBench_B.INPUT_1_1_1[0];
tmp[1] = ParallelTestBench_B.INPUT_1_1_1[1];
tmp[2] = ParallelTestBench_B.INPUT_1_1_1[2];
tmp[3] = ParallelTestBench_B.INPUT_1_1_1[3];
tmp_0[1] = 4;
simulationData->mData->mInputValues.mN = 4;
simulationData->mData->mInputValues.mX = &tmp[0];
simulationData->mData->mInputOffsets.mN = 2;
simulationData->mData->mInputOffsets.mX = &tmp_0[0];
simulationData->mData->mDx.mN = 4;
simulationData->mData->mDx.mX = &_rtXdot->ParallelTestBenchICE_Side_Ine_n[0];
diagnosticManager = (NeuDiagnosticManager *)ParallelTestBench_DW.STATE_1_DiagMgr;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
iS = ne_simulator_method((NeslSimulator *)ParallelTestBench_DW.STATE_1_Simulator, NESL_SIM_FORCINGFUNCTION, simulationData, diagnosticManager);
if (iS != 0) {
    lsat = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (lsat) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
/* {E!d838}End of ForcingFunction for SimscapeExecutionBlock: '<S62>/STATE_1' */

/* {S!d840}ForcingFunction for Integrator: '<S65>/Int' */
lsat = (ParallelTestBench_X.Int_CSTATE <= ParallelTestBench_P.Int_LowerSat);
usat = (ParallelTestBench_X.Int_CSTATE >= ParallelTestBench_P.Int_UpperSat);
if (((!lsat) && (!usat)) || (lsat && (ParallelTestBench_B.Divide_b > 0.0)) || (usat && (ParallelTestBench_B.Divide_b < 0.0))) {
    _rtXdot->Int_CSTATE = ParallelTestBench_B.Divide_b;
} else {
    /* in saturation */
    _rtXdot->Int_CSTATE = 0.0;
}
/* {E!d840}End of ForcingFunction for Integrator: '<S65>/Int' */

/* {S!d842}ForcingFunction for Integrator: '<Root>/Integrator' */
_rtXdot->Integrator_CSTATE_h = ParallelTestBench_B.FuelMassFlw;
/* {S!d844}ForcingFunction for Integrator: '<S79>/Integrator' */
lsat = (ParallelTestBench_X.Integrator_CSTATE_a <= ParallelTestBench_P.Integrator_LowerSat);
usat = (ParallelTestBench_X.Integrator_CSTATE_a >= ParallelTestBench_P.Integrator_UpperSat);
if (((!lsat) && (!usat)) || (lsat && (ParallelTestBench_B.Add_o > 0.0)) || (usat && (ParallelTestBench_B.Add_o < 0.0))) {
    _rtXdot->Integrator_CSTATE_a = ParallelTestBench_B.Add_o;
} else {
    /* in saturation */
    _rtXdot->Integrator_CSTATE_a = 0.0;
}
/* {E!d844}End of ForcingFunction for Integrator: '<S79>/Integrator' */

/* {S!d846}ForcingFunction for Integrator: '<S65>/Int1' */
_rtXdot->Int1_CSTATE = ParallelTestBench_B.Int;
/* {S!d848}ForcingFunction for Integrator: '<S80>/Integrator' */
lsat = (ParallelTestBench_X.Integrator_CSTATE_j <= ParallelTestBench_P.Integrator_LowerSat_b);
usat = (ParallelTestBench_X.Integrator_CSTATE_j >= ParallelTestBench_P.Integrator_UpperSat_d);
if (((!lsat) && (!usat)) || (lsat && (ParallelTestBench_B.Add_lf > 0.0)) || (usat && (ParallelTestBench_B.Add_lf < 0.0))) {
    _rtXdot->Integrator_CSTATE_j = ParallelTestBench_B.Add_lf;
} else {
    /* in saturation */
    _rtXdot->Integrator_CSTATE_j = 0.0;
}
/* {E!d848}End of ForcingFunction for Integrator: '<S80>/Integrator' */

/* {S!d850}ForcingFunction for Integrator: '<S48>/Integrator Limited' */
lsat = (ParallelTestBench_X.IntegratorLimited_CSTATE <= ParallelTestBench_P.IntegratorLimited_LowerSat);
usat = (ParallelTestBench_X.IntegratorLimited_CSTATE >= ParallelTestBench_P.Batt_Cap);
if (((!lsat) && (!usat)) || (lsat && (ParallelTestBench_B.Gain1_j > 0.0)) || (usat && (ParallelTestBench_B.Gain1_j < 0.0))) {
    _rtXdot->IntegratorLimited_CSTATE = ParallelTestBench_B.Gain1_j;
} else {
    /* in saturation */
    _rtXdot->IntegratorLimited_CSTATE = 0.0;
}
/* {E!d850}End of ForcingFunction for Integrator: '<S48>/Integrator Limited' */

/* {S!d852}ForcingFunction for Integrator: '<S26>/Integrator' */
_rtXdot->Integrator_CSTATE_o = ParallelTestBench_B.RPMtodegs;
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedForcingFunctionLocalVars", localVarDecl)>
%endfunction
%function ForcingFunctionFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void ForcingFunction(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(4, 6, fcnProtoType)>
%endfunction
