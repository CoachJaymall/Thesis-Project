%implements s41_b0_cywtj_Update "C"

%function Update(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

NeslSimulationData *simulationData;
NeuDiagnosticManager *diagnosticManager;
NeuDiagnosticTree *diagnosticTree;
char *msg;
real_T tmp_0[4];
real_T time;
int32_T tmp_2;
int_T tmp_1[2];
boolean_T tmp;
%closefile localVarDecl
/* {S!d802}Update for Integrator: '<S46>/Integrator' */
ParallelTestBench_DW.Integrator_IWORK = 0;
/* {S!d804}Update for SimscapeExecutionBlock: '<S62>/STATE_1' */
simulationData = (NeslSimulationData *)ParallelTestBench_DW.STATE_1_SimData;
time = %<(SLibCG_SE(LibGetT()))>;
simulationData->mData->mTime.mN = 1;
simulationData->mData->mTime.mX = &time;
simulationData->mData->mContStates.mN = 4;
simulationData->mData->mContStates.mX = &ParallelTestBench_X.ParallelTestBenchICE_Side_Ine_n[0];
simulationData->mData->mDiscStates.mN = 0;
simulationData->mData->mDiscStates.mX = &ParallelTestBench_DW.STATE_1_Discrete;
simulationData->mData->mModeVector.mN = 0;
simulationData->mData->mModeVector.mX = &ParallelTestBench_DW.STATE_1_Modes;
tmp = %<(SLibCG_SE(SLibCGIRGetSolverFoundZcEvents()))>;
simulationData->mData->mFoundZcEvents = tmp;
simulationData->mData->mIsMajorTimeStep = %<(SLibCG_SE(LibIsMajorTimeStep()))>;
tmp = %<(SLibCG_SE(SLibCGIRGetSolverAssertCheck()))>;
simulationData->mData->mIsSolverAssertCheck = tmp;
simulationData->mData->mIsSolverCheckingCIC = false;
tmp = %<(SLibCG_SE(RTMIsSolverComputingJacobian()))>;
simulationData->mData->mIsComputingJacobian = tmp;
simulationData->mData->mIsEvaluatingF0 = false;
simulationData->mData->mIsSolverRequestingReset = false;
simulationData->mData->mIsModeUpdateTimeStep = %<(SLibCG_SE(RTMGetIsModeUpdateTimeStep()))>;
tmp_1[0] = 0;
tmp_0[0] = ParallelTestBench_B.INPUT_1_1_1[0];
tmp_0[1] = ParallelTestBench_B.INPUT_1_1_1[1];
tmp_0[2] = ParallelTestBench_B.INPUT_1_1_1[2];
tmp_0[3] = ParallelTestBench_B.INPUT_1_1_1[3];
tmp_1[1] = 4;
simulationData->mData->mInputValues.mN = 4;
simulationData->mData->mInputValues.mX = &tmp_0[0];
simulationData->mData->mInputOffsets.mN = 2;
simulationData->mData->mInputOffsets.mX = &tmp_1[0];
diagnosticManager = (NeuDiagnosticManager *)ParallelTestBench_DW.STATE_1_DiagMgr;
diagnosticTree = neu_diagnostic_manager_get_initial_tree(diagnosticManager);
tmp_2 = ne_simulator_method((NeslSimulator *)ParallelTestBench_DW.STATE_1_Simulator, NESL_SIM_UPDATE, simulationData, diagnosticManager);
if (tmp_2 != 0) {
    tmp = error_buffer_is_empty(%<(LibGetRTModelErrorStatus())>);
    if (tmp) {
        msg = rtw_diagnostics_msg(diagnosticTree);
        %<(LibSetRTModelErrorStatus("msg"))>;
    }
}
/* {E!d804}End of Update for SimscapeExecutionBlock: '<S62>/STATE_1' */

/* {S!d806}Update for Integrator: '<S79>/Integrator' */
ParallelTestBench_DW.Integrator_IWORK_o = 0;
/* {S!d808}Update for Integrator: '<S80>/Integrator' */
ParallelTestBench_DW.Integrator_IWORK_n = 0;
/* {S!d810}Update for Integrator: '<S48>/Integrator Limited' */
ParallelTestBench_DW.IntegratorLimited_IWORK = 0;
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedUpdateLocalVars", localVarDecl)>
%endfunction
%function UpdateFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Update(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(4, 3, fcnProtoType)>
%endfunction
